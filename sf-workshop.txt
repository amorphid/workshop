Basic Types
===========

iex> IO.puts "It's B-29s, bub." 
It's B-29s, bub.
iex> 4
4
iex> 4 == 5
false
iex> 4 != 5                    
true
iex> 4 > 5 and 6 > 7
false
iex> Enum.first []
nil
iex> :symbol
:symbol

if true, do: IO.puts("It's true")
if true do
  IO.puts "You wanted the truth!"
  IO.puts "You can't handle the truth!"
end

also try for truth 1, 0, nil, "", []

:ok is typical elixir return code

"string"
'string'

substitution with #{}

iex(7)> "string" == 'string'
false

iex(8)> 1 and 2
** (ArgumentError) argument error: 1
iex(8)> 1 && 2 
2
iex(9)> true and true
true
iex(10)> 1 && 6 || 7  
6

Tuples
{:bruce, :tate}

Lists
[1, 2, 3]


Matching
========
iex> i = 5 
5
iex> 10 = i

multiple assignment
def total_price(item, cart, tax) do
  price = item.price
  price = price * cart.quantity
  price = price + price * tax
end


iex> austin = {:austin, :tx}     
{:austin, :tx}
iex> is_tuple {:a}
true


iex> austin = {:austin, :tx}     
{:austin, :tx}
iex> {city, state} = austin
{:austin, :tx}
iex> city
:austin
iex> state
:tx
iex> {_, big_state} = austin
{:austin, :tx}
iex> big_state
:tx

Lists
-----

iex> is_list list
true
iex> is_tuple list
false
iex> is_list "string" 
false
iex> is_list 'string' 
true

list = [1, 2, 3]
[one] =  list
[one, two, three] = list
[one, two, three, four] = list

iex(12)> [head|tail] = [1, 2, 3]
[1, 2, 3]
iex(13)> [head] = [1, 2, 3]
** (MatchError) no match of right hand side value: [1, 2, 3]
iex(13)> [head] = []       
** (MatchError) no match of right hand side value: []
iex(13)> [head, head2] = [1, 2, 3]
** (MatchError) no match of right hand side value: [1, 2, 3]
iex(13)> [head, head2] = [1, 2]   
[1, 2]

iex(15)> [1 | [2]]
[1, 2]
iex(16)> [1 | [2, 3]]
[1, 2, 3]
iex(17)> [1| []]
[1]
iex(18)> [1| 2]  
[1 | 2]

length list

keyword list

iex> powers = [{:wolverine, [:regeneration, :claws]}, {:sway, [:time_control]}, 
                   {:iceman, [:freeze]}]
[wolverine: [:regeneration, :claws], sway: [:time_control], iceman: [:freeze]]
iex> Keyword.get powers, :wolverine
[:regeneration, :claws]


iex> powers = [wolverine: [:regeneration, :claws], sway: [:time_control], 
                   iceman: [:freeze]]
[wolverine: [:regeneration, :claws], sway: [:time_control], iceman: [:freeze]]


iex> powers[:wolverine]
[:regeneration, :claws]



Structs/Maps/Paths
==================
------------
basic structs
------------

iex(1)> defmodule User do
...(1)>   defstruct first: "John", last: "Doe", age: 40
...(1)> end
{:module, User,
 <<70, 79, 82, 49, 0, 0, 5, 40, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 99, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 [first: "John", last: "Doe", age: 40]}
iex(2)> %User{}
%User{age: 40, first: "John", last: "Doe"}
iex(3)> u = %User{}
%User{age: 40, first: "John", last: "Doe"}
iex(4)> u.first    
"John"
iex(5)> u.last
"Doe"
iex(7)> bruce = %User{first: "Bruce", last: "Tate", age: 50}
%User{age: 50, first: "Bruce", last: "Tate"}
iex(8)> bruce = %User{first: "Bruce", last: "Tate", aeg: 50}
** (CompileError) iex:8: unknown key :aeg for struct User
...

iex(8)> bruce.__struct__
User
iex(9)> Enum.map bruce, fn({field, value}) -> {field, value} end
** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{age: 50, first: "Bruce", last: "Tate"}
    (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
    (elixir) lib/enum.ex:112: Enumerable.reduce/3
    (elixir) lib/enum.ex:981: Enum.map/2
iex(9)> Map.put(bruce, :age, :older_than_dirt)
%User{age: :older_than_dirt, first: "Bruce", last: "Tate"}




------------
struct paths
------------


iex(1)> defmodule Author do
...(1)>   defstruct name: "", genres: []
...(1)> end
{:module, Author,
 <<70, 79, 82, 49, 0, 0, 4, 244, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 99, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 [name: "", genres: []]}
iex(2)> defmodule Book do
...(2)>   defstruct title: "Seven Languages...", authors: %{}
...(2)> end
{:module, Book,
 <<70, 79, 82, 49, 0, 0, 5, 48, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 99, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...>>,
 [title: "Seven Languages...", authors: %{}]}
iex(3)> bruce = %Author{ name: "Bruce Tate" }       
%Author{genres: [], name: "Bruce Tate"}
iex(4)> seven = title: "Seven Languages...", authors: %{tate: bruce}
** (SyntaxError) iex:4: syntax error before: title
    
iex(4)> seven = %Book{ title: "Seven Languages...", authors: %{tate: bruce} }  
%Book{authors: %{tate: %Author{genres: [], name: "Bruce Tate"}},
 title: "Seven Languages..."}
iex(5)> books = %{seven_languages: seven}
%{seven_languages: %Book{authors: %{tate: %Author{genres: [],
      name: "Bruce Tate"}}, title: "Seven Languages..."}}
iex(7)> books[:seven_languages].authors[:tate] 
%Author{genres: [], name: "Bruce Tate"}

iex(8)> put_in books[:seven_languages].authors[:tate].name, "Bruce A. Tate"
%{seven_languages: %Book{authors: %{tate: %Author{genres: [],
      name: "Bruce A. Tate"}}, title: "Seven Languages..."}}
      
      
      
iex(9)> %{ seven_languages: book } = books                                 
%{seven_languages: %Book{authors: %{tate: %Author{genres: [],
      name: "Bruce Tate"}}, title: "Seven Languages..."}}
iex(10)> book
%Book{authors: %{tate: %Author{genres: [], name: "Bruce Tate"}},
 title: "Seven Languages..."}
      
      
      
Functions/Modules
=================

anon

iex> inc = fn(x) -> x + 1 end
#Function<6.80484245 in :erl_eval.expr/5>
iex> inc.(1)
2


call/pass anon

iex> double_call = fn(x, f) -> f.(f.(x)) end
#Function<12.80484245 in :erl_eval.expr/5>
iex> double_call.(2, inc)                   
4

capture
iex> add = &(&1 + &2)
&Kernel.+/2
iex> add.(1, 2)
3

partially applied function

iex> inc = &(add.(&1, 1))
 #Function<6.80484245 in :erl_eval.expr/5>
iex> inc.(1)
2
iex> dec = &(add.(&1, -1))
 #Function<6.80484245 in :erl_eval.expr/5>
iex> dec.(1)  
0



pipes

iex> x = 10         
10
iex> dec.(inc.(inc.(x)))
11

iex> 10 |> inc.() |> inc.() |> dec.()


10 |> inc.() |> inc.() |> dec.()
inc.(10) |> inc.() |> dec.()
inc.(11) |> dec.()
dec.(12)
11



Modules

defmodule Rectangle do
  def area(w, h), do: h * w
  def perimeter(w, h), do: 2 * (h + w)
end


Geometry


=========================
defmodule Rectangle do
  def area({h, w}), do: h * w

  def perimeter({h, w}) do
    2 * (h + w)
  end
end
defmodule Square do
  def area({w}), do: Rectangle.area({w, w})

  def area({w, h}) when (w == h) do
    Rectangle.area({w, w})
  end
  
  def perimeter({w}) do
    Rectangle.perimeter({w, w})
  end 

  def perimeter({w, h}) when (w == h) do
    Rectangle.perimeter({w, w})
  end
end
r = {3, 4}
IO.puts "The area of rectangle #{inspect r} is #{Rectangle.area r}" 

s = {4}
IO.puts "The area of square #{inspect s} is #{Square.area s}" 


IO.puts "The area of rectangle #{inspect r} is #{Square.area r}" 


=========================

do blocks 

  def f do 
    IO.puts "Block form"
  end


  def f(x), do: IO.puts("Key/value form")



default args

iex> defmodule Secret do           
...(4)>   def hanger(x \\ 18), do: x
...(4)> end                         
iex:4: redefining module Secret
{:module, Secret,
 <<...>>, {:hanger, 1}}


iex> function_exported?(Secret, :hanger, 0)
true
iex> function_exported?(Secret, :hanger, 1)
true
iex> Secret.hanger
18
iex> Secret.hanger(5)
5








no random access... sugar for keyword list

iex> list[1]
** (FunctionClauseError) no function clause matching 
  in Access.List.access/2
  ...
  
  
  
===================
print.exs

defmodule ListExample do
  def print([]), do: :ok
  def print([head|tail]) do
    IO.puts head
    print tail
  end
end

ListExample.print([:storm, :sabretooth, :mystique])
===================


iex> Enum.map list, &(IO.puts &1)

iex> Enum.filter [1, 2, 3], &(&1 > 1)       
[2, 3]
iex> Enum.reduce [1, 2, 3], &(&1 + &2)
6
iex> Enum.any? [1, 2, 3], &(&1 > 2)
true
iex> Enum.all? [1, 2, 3], &(&1 > 2)
false
iex> Enum.zip [1, 2, 3], [4, 5, 6] 
[{1, 4}, {2, 5}, {3, 6}]


for comprehensions

iex(2)> for x <- [1, 2, 3], y <- [4, 5, 6], do: {x, y} 
[{1, 4}, {1, 5}, {1, 6}, {2, 4}, {2, 5}, {2, 6}, {3, 4}, {3, 5}, {3, 6}]

iex(3)> for x <- [1, 2, 3], y <- [4, 5, 6], x > 2, do: {x, y} 
[{3, 4}, {3, 5}, {3, 6}]

iex(4)> for x <- [1, 2, 3], y <- [4, 5, 6], x > 2, y > 5, do: {x, y} 
[{3, 6}]



================================
defmodule QuickSort do
  def sort([]), do: []
  def sort([head|tail]) do
    sort( for( x <- tail, x < head, do: x) ) ++
    [head] ++ 
    sort( ( for x <- tail, x > head, do: x) )
  end
end

IO.inspect QuickSort.sort([5, 6, 3, 2, 7, 8])
===================================


default trailing options

def draw(square, options \\ [])

e.g. 
draw :square, line_width: 20
